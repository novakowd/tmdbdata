[{"path":"https://novakowd.github.io/tmdbdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tmdbdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load Packages and Data","title":"imdb_data","text":"","code":"library(tmdbdata) library(dplyr) library(tidyr) library(forcats) library(ggplot2) library(ggridges) library(scales) imdb_data <- load_imdb_data() #> creating ./cache_imdb/ directory #> ℹ Download https://datasets.imdbws.com/title.basics.tsv.gz #> ✔ Download https://datasets.imdbws.com/title.basics.tsv.gz - 196.5 MB [1s] #>  #> ℹ Unzip .gz file #> ✔ Unzip .gz file [3.5s] #>  #> ℹ Read .tsv file #> ℹ Read .tsv file - 11,662,763 rows x 9 columns #> ✔ Read .tsv file - 11,662,763 rows x 9 columns  [23.7s] #>  #> ℹ Save ./cache_imdb/title_basics.fst #> ℹ Save ./cache_imdb/title_basics.fst - 772.4 MB. #> ✔ Save ./cache_imdb/title_basics.fst - 772.4 MB. [2.7s] #>  #> ℹ Download https://datasets.imdbws.com/title.ratings.tsv.gz #> ✔ Download https://datasets.imdbws.com/title.ratings.tsv.gz - 7.5 MB [145ms] #>  #> ℹ Unzip .gz file #> ✔ Unzip .gz file [157ms] #>  #> ℹ Read .tsv file #> ✔ Read .tsv file - 1,568,304 rows x 3 columns  [386ms] #>  #> ℹ Save ./cache_imdb/title_ratings.fst #> ✔ Save ./cache_imdb/title_ratings.fst - 22.3 MB. [96ms] #>  #> ℹ Download https://datasets.imdbws.com/title.episode.tsv.gz #> ℹ Download https://datasets.imdbws.com/title.episode.tsv.gz - 47.2 MB #> ✔ Download https://datasets.imdbws.com/title.episode.tsv.gz - 47.2 MB [218ms] #>  #> ℹ Unzip .gz file #> ✔ Unzip .gz file [830ms] #>  #> ℹ Read .tsv file #> ℹ Read .tsv file - 8,974,569 rows x 4 columns #> ✔ Read .tsv file - 8,974,569 rows x 4 columns  [3.2s] #>  #> ℹ Save ./cache_imdb/title_episode.fst #> ✔ Save ./cache_imdb/title_episode.fst - 204.4 MB. [876ms] #>  #> ℹ Combining data from IMDB tables... #> • TV Episodes: 797,576 rows x 12 columns #> • Rated Media: 1,549,078 rows x 9 columns #> ℹ Save ./cache_imdb/imdb_tv_episodes.fst #> ✔ Save ./cache_imdb/imdb_tv_episodes.fst - 62.4 MB. [227ms] #>  #> ℹ Save ./cache_imdb/imdb_rated_media.fst #> ✔ Save ./cache_imdb/imdb_rated_media.fst - 79.7 MB. [355ms] #>  rated_media <- imdb_data$rated_media %>% mutate(runtimeMinutes = as.double(runtimeMinutes)) tv_episodes <- imdb_data$tv_episodes"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"determine-data-structure","dir":"Articles","previous_headings":"","what":"Determine data structure","title":"imdb_data","text":"","code":"rated_media %>% glimpse() #> Rows: 1,549,078 #> Columns: 9 #> $ titleType      <chr> \"movie\", \"movie\", \"movie\", \"movie\", \"tvSeries\", \"movie\"… #> $ title          <chr> \"The Shawshank Redemption\", \"The Dark Knight\", \"Incepti… #> $ averageRating  <dbl> 9.3, 9.0, 8.8, 8.8, 9.2, 8.8, 8.7, 8.9, 9.5, 8.7, 9.2, … #> $ numVotes       <int> 3043798, 3020785, 2683341, 2465082, 2433513, 2379234, 2… #> $ genres         <chr> \"Drama\", \"Action,Crime,Drama\", \"Action,Adventure,Sci-Fi… #> $ runtimeMinutes <dbl> 142, 152, 148, 139, 60, 142, 169, 154, 45, 136, 175, 17… #> $ startYear      <int> 1994, 2008, 2010, 1999, 2011, 1994, 2014, 1994, 2008, 1… #> $ endYear        <int> NA, NA, NA, NA, 2019, NA, NA, NA, 2013, NA, NA, NA, NA,… #> $ tconst         <chr> \"tt0111161\", \"tt0468569\", \"tt1375666\", \"tt0137523\", \"tt…"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"number-of-observations","dir":"Articles","previous_headings":"","what":"Number of observations","title":"imdb_data","text":"","code":"count_by_type <- rated_media %>%    group_by(titleType) %>%    summarise(count = n()) %>%    arrange(desc(count)) %>%    mutate(count = count %>%            prettyNum(big.mark = \",\"))  count_by_type #> # A tibble: 10 × 2 #>    titleType    count   #>    <chr>        <chr>   #>  1 tvEpisode    797,576 #>  2 movie        322,522 #>  3 short        158,491 #>  4 tvSeries     104,019 #>  5 video        56,613  #>  6 tvMovie      55,407  #>  7 tvMiniSeries 20,500  #>  8 videoGame    18,203  #>  9 tvSpecial    13,307  #> 10 tvShort      2,440 # Reorder titleTypes for future plots rated_media$titleType <- factor(rated_media$titleType,                                 levels = count_by_type$titleType)"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"rating-vs-votes","dir":"Articles","previous_headings":"Number of observations","what":"Rating vs Votes","title":"imdb_data","text":"","code":"rated_media %>%    ggplot(aes(x=numVotes, y=averageRating)) +    geom_bin_2d()+   scale_x_log10(labels = label_comma()) +    scale_y_continuous(breaks = seq(0,10,2))+   scale_fill_viridis_c(option = 'mako',                        labels = label_comma(),                        transform = transform_log10()) +   labs(title = \"Rating vs #Votes\") +   facet_wrap(~ titleType,              ncol = 3)"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"rating-vs-runtime","dir":"Articles","previous_headings":"Number of observations","what":"Rating vs Runtime","title":"imdb_data","text":"","code":"rated_media %>%    filter(runtimeMinutes < 3*60) %>%    ggplot(aes(x=runtimeMinutes, y=averageRating)) +    geom_bin_2d()+   scale_x_continuous(breaks = seq(0,300,60),                      labels = paste0(0:5,\"h\"),                      name = \"Runtime (Hours)\") +    scale_y_continuous(breaks = seq(0,10,2))+   scale_fill_viridis_c(option = 'rocket',                        labels = label_comma(),                        transform = transform_log10()) +   labs(title = \"Rating vs Runtime\") +   facet_wrap(~ titleType,              ncol = 3)"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"distrubutions-of-parameteres","dir":"Articles","previous_headings":"","what":"Distrubutions of parameteres","title":"imdb_data","text":"can see vertical ‘stripes’ data plot, suggesting underlying distributions may interest.","code":""},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"runtime","dir":"Articles","previous_headings":"Distrubutions of parameteres","what":"Runtime","title":"imdb_data","text":"- Many tvEpisodes either 30mins, 45mins, 1hr + Similar trend tvSeries - movies ~1:30 ± 30mins - shorts tvShorts don’t normally exceed 30 minutes","code":"rated_media %>%    mutate(titleType = fct_rev(as_factor(titleType))) %>%    filter(runtimeMinutes < 3*60) %>%   ggplot(aes(x=runtimeMinutes, y=titleType, fill = titleType)) +    geom_density_ridges(aes(scale = 1.5),                       show.legend = F)+   scale_x_continuous(breaks = seq(0,300,60),                      labels = paste0(0:5,\"h\"),                      name = \"Runtime (Hours)\") +    labs(title = \"Runtimes\") +    theme_minimal()"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"release-year","dir":"Articles","previous_headings":"Distrubutions of parameteres","what":"Release Year","title":"imdb_data","text":"","code":"rated_media %>%    mutate(titleType = (as_factor(titleType))) %>%    filter(startYear > 1950) %>%   ggplot(aes(x=startYear,               y=titleType,               fill = titleType)) +    geom_density_ridges(aes(scale = 1.3),                       show.legend = F)+   scale_x_continuous(breaks = seq(1950,2020,10),                      name = \"Release Year\") +    labs(title = \"Release Year\") +    theme_minimal()"},{"path":[]},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"top-series-by-votes","dir":"Articles","previous_headings":"TV Episodes","what":"Top series (by #votes)","title":"imdb_data","text":"","code":"rated_media %>%    filter(grepl('Series',titleType)) %>%    select(tconst, everything(), -titleType, titleType) %>%    head(80) #>         tconst                                     title averageRating numVotes #>         <char>                                    <char>         <num>    <int> #>  1:  tt0944947                           Game of Thrones           9.2  2433513 #>  2:  tt0903747                              Breaking Bad           9.5  2330915 #>  3:  tt4574334                           Stranger Things           8.6  1445426 #>  4:  tt0108778                                   Friends           8.9  1144283 #>  5:  tt1520211                          The Walking Dead           8.1  1141861 #>  6:  tt1475582                                  Sherlock           9.0  1048301 #>  7:  tt7366338                                 Chernobyl           9.3   949728 #>  8:  tt0898266                       The Big Bang Theory           8.1   907924 #>  9:  tt0773262                                    Dexter           8.6   843776 #> 10:  tt1190634                                  The Boys           8.6   777289 #> 11:  tt0386676                                The Office           9.0   775224 #> 12:  tt0460649                     How I Met Your Mother           8.3   759244 #> 13:  tt3032476                          Better Call Saul           9.0   731601 #> 14:  tt2442560                            Peaky Blinders           8.7   711570 #> 15:  tt2356777                            True Detective           8.9   702963 #> 16:  tt2085059                              Black Mirror           8.7   693305 #> 17: tt10919420                                Squid Game           8.0   663222 #> 18:  tt3581920                            The Last of Us           8.6   655142 #> 19:  tt2861424                            Rick and Morty           9.1   649925 #> 20:  tt0411008                                      Lost           8.3   641206 #> 21:  tt0455275                              Prison Break           8.3   627652 #> 22:  tt8111088                           The Mandalorian           8.6   625011 #> 23: tt10048342                        The Queen's Gambit           8.5   617322 #> 24:  tt2306299                                   Vikings           8.5   617302 #> 25:  tt2560140                           Attack on Titan           9.1   610229 #> 26:  tt5180504                               The Witcher           7.9   595564 #> 27:  tt6468322                               Money Heist           8.2   571214 #> 28:  tt0185906                          Band of Brothers           9.4   561911 #> 29:  tt0412142                                     House           8.7   558416 #> 30:  tt0475784                                 Westworld           8.4   548013 #> 31:  tt1856010                            House of Cards           8.6   546925 #> 32:  tt0141842                              The Sopranos           9.2   524569 #> 33:  tt1442437                             Modern Family           8.5   515904 #> 34:  tt1632701                                     Suits           8.4   515130 #> 35:  tt0460681                              Supernatural           8.4   511869 #> 36:  tt3322312                                 Daredevil           8.6   505631 #> 37:  tt2707408                                    Narcos           8.7   501151 #> 38:  tt5753856                                      Dark           8.7   491627 #> 39: tt11198330                       House of the Dragon           8.3   476157 #> 40:  tt2193021                                     Arrow           7.5   454174 #> 41:  tt0096697                              The Simpsons           8.6   453501 #> 42:  tt2802850                                     Fargo           8.8   444783 #> 43:  tt9140554                                      Loki           8.2   444297 #> 44:  tt4158110                                 Mr. Robot           8.5   441171 #> 45:  tt0877057                                Death Note           8.9   425280 #> 46:  tt7631058 The Lord of the Rings: The Rings of Power           6.9   425217 #> 47:  tt0121955                                South Park           8.7   422709 #> 48: tt13443470                                 Wednesday           8.0   416486 #> 49:  tt0417299                Avatar: The Last Airbender           9.3   406149 #> 50:  tt0306414                                  The Wire           9.3   403184 #> 51: tt10986410                                 Ted Lasso           8.8   400570 #> 52:  tt9140560                               WandaVision           7.9   396101 #> 53: tt11126994                                    Arcane           9.0   395203 #> 54:  tt2467372                        Brooklyn Nine-Nine           8.4   394037 #> 55:  tt7767422                             Sex Education           8.2   378893 #> 56:  tt0182576                                Family Guy           8.1   377439 #> 57:  tt3107288                                 The Flash           7.5   376981 #> 58:  tt4052886                                   Lucifer           8.0   375645 #> 59:  tt5071412                                     Ozark           8.5   370020 #> 60:  tt1796960                                  Homeland           8.3   369549 #> 61:  tt0098904                                  Seinfeld           8.9   368829 #> 62:  tt5290382                                Mindhunter           8.6   367537 #> 63:  tt1405406                       The Vampire Diaries           7.7   366922 #> 64:  tt0413573                            Grey's Anatomy           7.6   359585 #> 65:  tt1844624                     American Horror Story           7.9   354626 #> 66:  tt1124373                           Sons of Anarchy           8.5   340210 #> 67:  tt7335184                                       You           7.7   336329 #> 68:  tt0367279                      Arrested Development           8.6   334740 #> 69:  tt2372162                   Orange Is the New Black           8.0   328947 #> 70:  tt1837492                            13 Reasons Why           7.4   328734 #> 71:  tt7660850                                Succession           8.8   317172 #> 72: tt11280740                                 Severance           8.7   316482 #> 73: tt14392248                                 Aspirants           9.2   315616 #> 74: tt12637874                                   Fallout           8.3   313914 #> 75:  tt1586680                                 Shameless           8.5   310910 #> 76:  tt6763664                The Haunting of Hill House           8.5   309942 #> 77:  tt1312171                      The Umbrella Academy           7.8   303758 #> 78:  tt1439629                                 Community           8.5   303410 #> 79:  tt1266020                      Parks and Recreation           8.6   302909 #> 80:  tt0388629                                 One Piece           9.0   297137 #>         tconst                                     title averageRating numVotes #>                         genres runtimeMinutes startYear endYear    titleType #>                         <char>          <num>     <int>   <int>       <fctr> #>  1:     Action,Adventure,Drama             60      2011    2019     tvSeries #>  2:       Crime,Drama,Thriller             45      2008    2013     tvSeries #>  3:       Drama,Fantasy,Horror             60      2016    2025     tvSeries #>  4:             Comedy,Romance             22      1994    2004     tvSeries #>  5:      Drama,Horror,Thriller             45      2010    2022     tvSeries #>  6:        Crime,Drama,Mystery             90      2010    2017     tvSeries #>  7:     Drama,History,Thriller             60      2019    2019 tvMiniSeries #>  8:             Comedy,Romance             22      2007    2019     tvSeries #>  9:        Crime,Drama,Mystery             60      2006    2013     tvSeries #> 10:        Action,Comedy,Crime             60      2019      NA     tvSeries #> 11:                     Comedy             22      2005    2013     tvSeries #> 12:       Comedy,Drama,Romance             23      2005    2014     tvSeries #> 13:                Crime,Drama             45      2015    2022     tvSeries #> 14:                Crime,Drama             60      2013    2022     tvSeries #> 15:        Crime,Drama,Mystery             60      2014      NA     tvSeries #> 16:        Crime,Drama,Mystery             60      2011      NA     tvSeries #> 17:       Action,Drama,Mystery             60      2021    2025     tvSeries #> 18:     Action,Adventure,Drama             50      2023      NA     tvSeries #> 19: Adventure,Animation,Comedy             23      2013      NA     tvSeries #> 20:    Adventure,Drama,Fantasy             45      2004    2010     tvSeries #> 21:         Action,Crime,Drama             44      2005    2017     tvSeries #> 22:   Action,Adventure,Fantasy             40      2019      NA     tvSeries #> 23:                      Drama             60      2020    2020 tvMiniSeries #> 24:     Action,Adventure,Drama             45      2013    2020     tvSeries #> 25: Action,Adventure,Animation             24      2013    2023     tvSeries #> 26:     Action,Adventure,Drama             60      2019      NA     tvSeries #> 27:         Action,Crime,Drama             60      2017    2021     tvSeries #> 28:       Action,Drama,History             60      2001    2001 tvMiniSeries #> 29:              Drama,Mystery             45      2004    2012     tvSeries #> 30:       Drama,Mystery,Sci-Fi             60      2016    2022     tvSeries #> 31:                      Drama             50      2013    2018     tvSeries #> 32:                Crime,Drama             60      1999    2007     tvSeries #> 33:       Comedy,Drama,Romance             22      2009    2020     tvSeries #> 34:               Comedy,Drama             45      2011    2019     tvSeries #> 35:       Drama,Fantasy,Horror             44      2005    2020     tvSeries #> 36:         Action,Crime,Drama             60      2015    2018     tvSeries #> 37:      Biography,Crime,Drama             50      2015    2017     tvSeries #> 38:        Crime,Drama,Mystery             60      2017    2020     tvSeries #> 39:     Action,Adventure,Drama             50      2022      NA     tvSeries #> 40:     Action,Adventure,Crime             42      2012    2020     tvSeries #> 41:           Animation,Comedy             22      1989      NA     tvSeries #> 42:       Crime,Drama,Thriller             60      2014    2024     tvSeries #> 43:   Action,Adventure,Fantasy             50      2021    2023     tvSeries #> 44:       Crime,Drama,Thriller             45      2015    2019     tvSeries #> 45:      Animation,Crime,Drama             24      2006    2007     tvSeries #> 46:     Action,Adventure,Drama             60      2022      NA     tvSeries #> 47:           Animation,Comedy             22      1997      NA     tvSeries #> 48:       Comedy,Crime,Fantasy             45      2022      NA     tvSeries #> 49: Action,Adventure,Animation             23      2005    2008     tvSeries #> 50:       Crime,Drama,Thriller             60      2002    2008     tvSeries #> 51:         Comedy,Drama,Sport             30      2020      NA     tvSeries #> 52:        Action,Comedy,Drama             39      2021    2021 tvMiniSeries #> 53: Action,Adventure,Animation             40      2021    2024     tvSeries #> 54:               Comedy,Crime             22      2013    2021     tvSeries #> 55:       Comedy,Drama,Romance             60      2019    2023     tvSeries #> 56:           Animation,Comedy             22      1999      NA     tvSeries #> 57:     Action,Adventure,Drama             43      2014    2023     tvSeries #> 58:        Crime,Drama,Fantasy             45      2016    2021     tvSeries #> 59:       Crime,Drama,Thriller             60      2017    2022     tvSeries #> 60:        Crime,Drama,Mystery             60      2011    2020     tvSeries #> 61:                     Comedy             22      1989    1998     tvSeries #> 62:        Crime,Drama,Mystery             60      2017    2019     tvSeries #> 63:       Drama,Fantasy,Horror             43      2009    2017     tvSeries #> 64:              Drama,Romance             45      2005      NA     tvSeries #> 65:        Drama,Horror,Sci-Fi             60      2011      NA     tvSeries #> 66:       Crime,Drama,Thriller             45      2008    2014     tvSeries #> 67:        Crime,Drama,Romance             45      2018    2025     tvSeries #> 68:                     Comedy             22      2003    2019     tvSeries #> 69:         Comedy,Crime,Drama             60      2013    2019     tvSeries #> 70:     Drama,Mystery,Thriller             60      2017    2020     tvSeries #> 71:               Comedy,Drama             60      2018    2023     tvSeries #> 72:       Drama,Mystery,Sci-Fi             50      2022      NA     tvSeries #> 73:                      Drama             45      2021      NA     tvSeries #> 74:     Action,Adventure,Drama             60      2024      NA     tvSeries #> 75:               Comedy,Drama             60      2011    2021     tvSeries #> 76:       Drama,Horror,Mystery             60      2018    2018 tvMiniSeries #> 77:    Action,Adventure,Comedy             60      2019    2024     tvSeries #> 78:                     Comedy             22      2009    2015     tvSeries #> 79:                     Comedy             22      2009    2015     tvSeries #> 80: Action,Adventure,Animation             24      1999      NA     tvSeries #>                         genres runtimeMinutes startYear endYear    titleType"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"most-episodes","dir":"Articles","previous_headings":"TV Episodes","what":"Most Episodes","title":"imdb_data","text":"","code":"tv_episodes %>%   group_by(tconst_series, series_name) %>%    summarize(seasons = length(unique(seasonNumber)),             episodes = n(),             start = min(episode_year, na.rm = T),             last = max(episode_year, na.rm = T)) %>%    arrange(desc(episodes)) %>%    ungroup() %>%    head(80) #> # A tibble: 80 × 6 #>    tconst_series series_name                        seasons episodes start  last #>    <chr>         <chr>                                <int>    <int> <dbl> <dbl> #>  1 tt0115147     The Daily Show                          30     3907  1996  2025 #>  2 tt0084987     The Bill                                26     2403  1984  2010 #>  3 tt3444938     The Tonight Show Starring Jimmy F…      12     2099  2014  2025 #>  4 tt0185103     WWE Raw                                 33     1669  1993  2025 #>  5 tt3697842     The Late Show with Stephen Colbert      10     1662  2015  2025 #>  6 tt0458254     The Colbert Report                      12     1357  2005  2014 #>  7 tt0227972     WWE Smackdown!                          27     1344  1999  2025 #>  8 tt1820166     Ridiculousness                          42     1309  2011  2024 #>  9 tt0806910     Tatort                                   1     1303  1970  2025 #> 10 tt0088512     EastEnders                               1     1257  1985  2025 #> # ℹ 70 more rows"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"episode-heatmap","dir":"Articles","previous_headings":"TV Episodes","what":"Episode Heatmap","title":"imdb_data","text":"","code":"series_id <- \"tt0096697\" # id for \"The Simpsons\"  series_episodes <- tv_episodes %>%    filter(tconst_series == series_id,          episodeNumber > 0) %>%    arrange(seasonNumber,episodeNumber)  # Add in x and y coordinates to draw boxes plot_eps <- series_episodes %>%    select(series_name:episode_rating) %>%    mutate(x_start = episodeNumber - 0.5,          x_end = episodeNumber + 0.5,          y_start = seasonNumber - 0.5,          y_end = seasonNumber + 0.5) %>%    pivot_longer(c(x_start,x_end),                names_to = NULL,                values_to = \"x\") %>%    pivot_longer(c(y_start,y_end),                names_to = NULL,                values_to = \"y\") %>%    group_by(seasonNumber, episodeNumber, episode_name) %>%    mutate(draw_order = case_when(x == min(x) & y == min(y) ~ 1,                                 x == min(x) & y == max(y) ~ 2,                                 x == max(x) & y == max(y) ~ 3,                                 x == max(x) & y == min(y) ~ 4)) %>%    arrange(seasonNumber, episodeNumber, draw_order)       episode_heatmap <- plot_eps %>%    ggplot(aes(x=episodeNumber,              y=seasonNumber,              group = paste(seasonNumber, episodeNumber),              # color = episode_rating,              fill = episode_rating)) +    geom_polygon(aes(x=x, y=y)) +         #COORDINATES USED HERE   geom_text(aes(label = episode_rating),             size = 2) +    scale_fill_distiller(palette = 'RdYlGn',                        direction = 1,                        limits = c(5,10),                        label = label_number(accuracy = 1),                        name = 'IMDB Rating') +    scale_x_continuous(breaks = seq(1, max(series_episodes$episodeNumber),1),                      name = \"Episode\") +     scale_y_reverse(breaks = 1:max(series_episodes$seasonNumber),                   name = \"Season\") +    labs(title = series_episodes$series_name[1]) +    theme_minimal() +    theme(axis.line = element_blank(),         plot.background = element_blank(),         panel.grid.major = element_blank(),         panel.grid.major.x = element_line(),         panel.grid.minor = element_blank(),         panel.border = element_blank(),         plot.title = element_text(size = 20, face = \"bold\"),         axis.title = element_text(size = 20),         axis.text = element_text(face = \"bold\",                                  size = 7))"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"heatmap","dir":"Articles","previous_headings":"TV Episodes > Episode Heatmap","what":"Heatmap","title":"imdb_data","text":"","code":"episode_heatmap"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"top-episodes","dir":"Articles","previous_headings":"TV Episodes","what":"Top episodes:","title":"imdb_data","text":"","code":"topten_episodes <- series_episodes %>%    arrange(desc(episode_rating)) %>%    mutate(season_episode = paste0(seasonNumber,                                  \"–\",                                  episodeNumber)) %>%    select(season_episode,          episode_name,          episode_rating,          numVotes,          episode_year) %>%    head(20)  ymin <- 5 topten_episodes %>%    mutate(ratingoffset = episode_rating - ymin,          season_episode = factor(season_episode,                                   levels = season_episode)) %>%    ggplot(aes(x=season_episode,               y = ratingoffset,               fill = episode_rating)) +   geom_col(color = 'black') +   geom_text(aes(label = episode_name,                 y=0.1,                 angle = 90,                 hjust = 0))+   geom_text(aes(label = episode_rating,                 vjust = -0.2))+   scale_y_continuous(labels = function(n) n + ymin,                      name = \"Rating\") +   theme(axis.text.x = element_text(angle = 45,                                    vjust = 0.8))+   scale_fill_distiller(palette = 'RdYlGn',                        direction = 1,                        limits = c(5,10),                        label = label_number(accuracy = 1),                        name = 'IMDB Rating')"},{"path":"https://novakowd.github.io/tmdbdata/articles/imdb_data.html","id":"season-ratings","dir":"Articles","previous_headings":"TV Episodes","what":"Season Ratings:","title":"imdb_data","text":"","code":"season_ratings <- series_episodes %>%    group_by(seasonNumber) %>%    summarize(rating = mean(episode_rating) %>% round(1))  ymin <- 5 season_ratings %>%    mutate(ratingoffset = rating - ymin) %>%    ggplot(aes(x = seasonNumber, y = ratingoffset, fill = rating)) +    geom_col(color = 'black') +   scale_y_continuous(labels = function(n) n + ymin,                      name = 'Rating') +   scale_fill_distiller(palette = 'RdYlGn',                        direction = 1,                        limits = c(5,10),                        label = label_number(accuracy = 1),                        name = 'IMDB Rating')"},{"path":"https://novakowd.github.io/tmdbdata/articles/tmdbdata.html","id":"tmdb-data-functions-with-httr2functions","dir":"Articles","previous_headings":"","what":"TMDB data functions with httr2::functions()","title":"tmdbdata","text":"Package uses httr2 package functions generate perform requests extract results response body.","code":""},{"path":"https://novakowd.github.io/tmdbdata/articles/tmdbdata.html","id":"create-basic-request","dir":"Articles","previous_headings":"TMDB data functions with httr2::functions()","what":"Create Basic Request","title":"tmdbdata","text":"base_tmdb_request constructed looking settings found API documentation. example: httr2::req_headers() info Response Format Authentication Documentation. httr2::req_throttle() info Rate Limits Documentation 📝 default auth_token = get_auth_token(), work environment variable setup mentioned Authentication Authorization header info also redacted following objects. Running base_tmdb_request() function generates basic <httr2_request> object: Normally auth_token need specified Authentication steps followed functions req_headers(), req_error(), req_user_agent(), req_throttle() change URL https://api.themoviedb.org/3/, add elements request Headers, Options, Policies.","code":"base_tmdb_request #> function (auth_token = get_auth_token())  #> { #>     httr2::request(\"https://api.themoviedb.org/3/\") %>% httr2::req_headers(accept = \"application/json\",  #>         Authorization = paste(\"Bearer\", auth_token), .redact = \"Authorization\") %>%  #>         httr2::req_error(body = tmdb_error_body) %>% httr2::req_user_agent(\"tmdbdata (https://github.com/novakowd/tmdbdata)\") %>%  #>         httr2::req_throttle(rate = 40, realm = \"https://api.themoviedb.org/3/\") #> } #> <bytecode: 0x55b7d9ed8c48> #> <environment: namespace:tmdbdata> base_request <- base_tmdb_request(auth_token = decrypt_auth_token()) base_request #> <httr2_request> #> GET https://api.themoviedb.org/3/ #> Headers: #> • accept       : \"application/json\" #> • Authorization: <REDACTED> #> Body: empty #> Options: #> • useragent: \"tmdbdata (https://github.com/novakowd/tmdbdata)\" #> Policies: #> • error_body    : <function> #> • throttle_realm: \"https://api.themoviedb.org/3/\""},{"path":"https://novakowd.github.io/tmdbdata/articles/tmdbdata.html","id":"append-request-details","dir":"Articles","previous_headings":"TMDB data functions with httr2::functions()","what":"Append Request Details","title":"tmdbdata","text":"next step append path base URL add relevant arguments help request. Find appropriate arguments consulting API Documentation. example looks Search>Movie Documentation states: required parameter called query , optional parameters, default values. Let’s try putting together request search movies Avengers: functions req_url_path_append() req_url_query() modified url https://api.themoviedb.org/3/search/movie?query=Avengers","code":"base_request %>%    req_url_path_append(\"search\",\"movie\") %>%    req_url_query(query = \"Avengers\") #> <httr2_request> #> GET https://api.themoviedb.org/3/search/movie?query=Avengers #> Headers: #> • accept       : \"application/json\" #> • Authorization: <REDACTED> #> Body: empty #> Options: #> • useragent: \"tmdbdata (https://github.com/novakowd/tmdbdata)\" #> Policies: #> • error_body    : <function> #> • throttle_realm: \"https://api.themoviedb.org/3/\""},{"path":"https://novakowd.github.io/tmdbdata/articles/tmdbdata.html","id":"perform-request","dir":"Articles","previous_headings":"TMDB data functions with httr2::functions()","what":"Perform Request","title":"tmdbdata","text":"Now built request, httr2::req_perform() allows us get response. assigning `variable` stores response -memory, exceed API's [Rate Limits](https://developer.themoviedb.org/docs/rate-limiting)","code":"assigning to a `variable` stores the response in-memory, as to not exceed the API's [Rate Limits](https://developer.themoviedb.org/docs/rate-limiting) response <- base_request %>%    req_url_path_append(\"search\", \"movie\") %>%    req_url_query(query = \"Avengers\") %>%    req_perform()  response #> <httr2_response> #> GET https://api.themoviedb.org/3/search/movie?query=Avengers #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (11773 bytes)"},{"path":"https://novakowd.github.io/tmdbdata/articles/tmdbdata.html","id":"response-structure","dir":"Articles","previous_headings":"TMDB data functions with httr2::functions() > Perform Request","what":"Response Structure","title":"tmdbdata","text":"Printing <httr2_response> object show much information, though information available inspecting closer: actual ‘Data’ ’re looking $body element, though usable format yet:","code":"class(response) #> [1] \"httr2_response\" data.frame(class = unlist(lapply(response,class)),            length = unlist(lapply(response,length))) #>                     class length #> method          character      1 #> url             character      1 #> status_code       integer      1 #> headers     httr2_headers     17 #> body                  raw  11773 #> request     httr2_request      8 #> cache         environment      0 names(response$headers) #>  [1] \"content-type\"     \"date\"             \"etag\"             \"content-encoding\" #>  [5] \"server\"           \"cache-control\"    \"x-memc\"           \"x-memc-key\"       #>  [9] \"x-memc-age\"       \"x-memc-expires\"   \"vary\"             \"x-cache\"          #> [13] \"via\"              \"x-amz-cf-pop\"     \"alt-svc\"          \"x-amz-cf-id\"      #> [17] \"vary\" response$body %>% glimpse() #>  raw [1:11773] 7b 22 70 61 ..."},{"path":"https://novakowd.github.io/tmdbdata/articles/tmdbdata.html","id":"response-body","dir":"Articles","previous_headings":"TMDB data functions with httr2::functions()","what":"Response Body","title":"tmdbdata","text":"httr2 provides many resp_body_*() functions extract body data, depending API response format(s). API Documentation states supported response format JSON, use resp_body_json() function use simplifyVector = T make resulting lists easier work . Inspecting body shows list 4 elements. $page, $total_pages, $total_results elements integer values: $results element nested list json response uses tidyr::unnest_wider() clean data get result data frame (tibble::tibble())","code":"body <- response %>%    resp_body_json() lapply(body, class) #> $page #> [1] \"integer\" #>  #> $results #> [1] \"list\" #>  #> $total_pages #> [1] \"integer\" #>  #> $total_results #> [1] \"integer\" body[c(\"page\", \"total_pages\", \"total_results\")] #> $page #> [1] 1 #>  #> $total_pages #> [1] 7 #>  #> $total_results #> [1] 128 tibble::tibble(results = body$results) %>%    tidyr::unnest_wider(results) %>%    dplyr::glimpse() #> Rows: 20 #> Columns: 14 #> $ adult             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ backdrop_path     <chr> \"/Al127H6f1RXpESdg0MGNL2g8mzO.jpg\", \"/mDfJG3LC3Dqb67… #> $ genre_ids         <list> [16, 35, 878], [12, 28, 878], [878, 28, 12], [28, 1… #> $ id                <int> 1359227, 299536, 24428, 40081, 257346, 1154598, 2995… #> $ original_language <chr> \"en\", \"en\", \"en\", \"zh\", \"ja\", \"en\", \"en\", \"en\", \"en\"… #> $ original_title    <chr> \"LEGO Marvel Avengers: Mission Demolition\", \"Avenger… #> $ overview          <chr> \"A young, aspiring hero and superhero fan inadverten… #> $ popularity        <dbl> 4.2844, 33.0676, 30.4445, 1.1969, 2.0574, 2.5716, 21… #> $ poster_path       <chr> \"/4KfgyzCgJeG0XJDbqNztdP730Pv.jpg\", \"/7WsyChQLEftFiD… #> $ release_date      <chr> \"2024-10-17\", \"2018-04-25\", \"2012-04-25\", \"1978-12-2… #> $ title             <chr> \"LEGO Marvel Avengers: Mission Demolition\", \"Avenger… #> $ video             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ vote_average      <dbl> 6.807, 8.236, 7.747, 6.800, 6.365, 6.552, 8.238, 7.2… #> $ vote_count        <int> 96, 30518, 31785, 98, 275, 126, 26330, 23421, 724, 0…"},{"path":"https://novakowd.github.io/tmdbdata/articles/tmdbdata.html","id":"missing-data","dir":"Articles","previous_headings":"TMDB data functions with httr2::functions() > Response Body","what":"Missing Data","title":"tmdbdata","text":"body$total_results 128, yet body$results contain 20 rows. body$total_pages = 7 response returns one page. get pages, need specify additional argument page = n response, like : ‘second page’ table contains next 20 rows. get rows need repeat page = 7 combine pages search can simply call wrapper function:","code":"page2_response <- base_request %>%    req_url_path_append(\"search\", \"movie\") %>%    req_url_query(query = \"Avengers\",                 page = 2) %>%                ### NEW ARGUMENT   req_perform() %>%    resp_body_json(simplifyVector = T)   tibble::tibble(results = page2_response$results ) %>%    tidyr::unnest_wider(results) %>%    dplyr::glimpse() #> Rows: 20 #> Columns: 14 #> $ adult             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ backdrop_path     <chr> \"/r5uAQQahZzcTYyPdlomDggyxHkV.jpg\", \"/d1bKi2TRB8iFEz… #> $ genre_ids         <list<list>> [<35, 14, 28>], [<35, 27>], [<10751, 16, 28, … #> $ id                <int> 538153, 1353766, 940543, 385411, 48230, 109088, 5217… #> $ original_language <chr> \"en\", \"xx\", \"en\", \"el\", \"ja\", \"zh\", \"en\", \"fr\", \"it\"… #> $ original_title    <chr> \"Avengers of Justice: Farce Wars\", \"風流少女殺人事件\", \"LEGO… #> $ overview          <chr> \"While trying to remain a good husband and father, S… #> $ popularity        <dbl> 1.3169, 0.2304, 0.3979, 0.0409, 0.3615, 0.3538, 0.60… #> $ poster_path       <chr> \"/yymsCwKPbJIF1xcl2ih8fl7OxAa.jpg\", \"/alcvekyWjaRdCZ… #> $ release_date      <chr> \"2018-07-20\", \"2024-09-22\", \"2022-01-17\", \"1975-01-0… #> $ title             <chr> \"Avengers of Justice: Farce Wars\", \"A Brighter Summe… #> $ video             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ vote_average      <dbl> 5.300, 7.800, 7.031, 8.400, 7.100, 6.800, 5.100, 7.4… #> $ vote_count        <int> 28, 2, 16, 9, 14, 23, 64, 25, 33, 24, 6, 149, 4, 17,… search_movies(query = \"Avengers\",               auth_token = decrypt_auth_token()) %>%    dplyr::glimpse() #> Rows: 128 #> Columns: 14 #> $ adult             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ backdrop_path     <chr> \"/rthMuZfFv4fqEU4JVbgSW9wQ8rs.jpg\", \"/mDfJG3LC3Dqb67… #> $ genre_ids         <list> [28, 878, 12], [12, 28, 878], [878, 28, 12], [12, 8… #> $ id                <int> 986056, 299536, 24428, 299534, 99861, 1003596, 10035… #> $ original_language <chr> \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"… #> $ original_title    <chr> \"Thunderbolts*\", \"Avengers: Infinity War\", \"The Aven… #> $ overview          <chr> \"After finding themselves ensnared in a death trap, … #> $ popularity        <dbl> 239.5162, 33.0676, 30.4445, 21.9561, 15.8466, 15.175… #> $ poster_path       <chr> \"/m9EtP1Yrzv6v7dMaC9mRaGhd1um.jpg\", \"/7WsyChQLEftFiD… #> $ release_date      <chr> \"2025-04-30\", \"2018-04-25\", \"2012-04-25\", \"2019-04-2… #> $ title             <chr> \"Thunderbolts*\", \"Avengers: Infinity War\", \"The Aven… #> $ video             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ vote_average      <dbl> 7.500, 8.236, 7.747, 8.238, 7.271, 0.000, 0.000, 6.8… #> $ vote_count        <int> 874, 30518, 31785, 26330, 23421, 0, 0, 96, 126, 724,…"},{"path":"https://novakowd.github.io/tmdbdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Novakowski. Author, maintainer.","code":""},{"path":"https://novakowd.github.io/tmdbdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Novakowski D (2025). tmdbdata: Get Data Movie Database (TMDB) via API. R package version 0.0.0.9000, https://novakowd.github.io/tmdbdata/.","code":"@Manual{,   title = {tmdbdata: Get Data from The Movie Database (TMDB) via the API},   author = {Dylan Novakowski},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://novakowd.github.io/tmdbdata/}, }"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"tmdbdata","dir":"","previous_headings":"","what":"Get Data from The Movie Database (TMDB) via the API","title":"Get Data from The Movie Database (TMDB) via the API","text":"goal tmdbdata serve API wrapper access data Movie Database’s (TMDB) Application Programming Interface (API)","code":""},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get Data from The Movie Database (TMDB) via the API","text":"can install development version tmdbdata GitHub :","code":"# install.packages(\"pak\") pak::pak(\"novakowd/tmdbdata\")"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"authentication","dir":"","previous_headings":"","what":"Authentication","title":"Get Data from The Movie Database (TMDB) via the API","text":"package must supplied API Read Access Token functions interact API. Otherwise API server throw error message: obtain Access Token, follow steps API’s documentation. YOUR_AUTH_TOKEN, store environment variable storing .Renviron file means variable available future R sessions set_auth_token() also set TMDB_AUTH_TOKEN environment variable, specific session ’re working package’s functions can now used default argument auth_token = get_auth_token() automatically get environment variable","code":"search_movies(query = \"Avengers\",               auth_token = invalid_auth_token) #> Error in `httr2::req_perform()`: #> ! HTTP 401 Unauthorized. #> • Invalid API key: You must be granted a valid key. usethis::edit_r_environ()  # type `TMDB_AUTH_TOKEN=YOUR_AUTH_TOKEN` in the `.Renviron` that opened, # then save the file"},{"path":[]},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"search-for-movies","dir":"","previous_headings":"","what":"Search For Movies","title":"Get Data from The Movie Database (TMDB) via the API","text":"","code":"avenger_movies <- search_movies(query = \"Avengers\",                                  num_pages = 1)   avenger_movies %>% dplyr::glimpse() #> Rows: 20 #> Columns: 14 #> $ adult             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ backdrop_path     <chr> \"/gHLs7Fy3DzLmLsD4lmfqL55KGcl.jpg\", \"/mDfJG3LC3Dqb67… #> $ genre_ids         <list> [878, 28, 12], [12, 28, 878], [12, 878, 28], [28, 1… #> $ id                <int> 24428, 299536, 299534, 99861, 1003596, 1003598, 1359… #> $ original_language <chr> \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"ja\"… #> $ original_title    <chr> \"The Avengers\", \"Avengers: Infinity War\", \"Avengers:… #> $ overview          <chr> \"When an unexpected enemy emerges and threatens glob… #> $ popularity        <dbl> 36.6243, 34.6673, 24.3061, 19.8977, 18.3720, 8.4169,… #> $ poster_path       <chr> \"/RYMX2wcKCBAr24UyPD7xwmjaTn.jpg\", \"/7WsyChQLEftFiDO… #> $ release_date      <chr> \"2012-04-25\", \"2018-04-25\", \"2019-04-24\", \"2015-04-2… #> $ title             <chr> \"The Avengers\", \"Avengers: Infinity War\", \"Avengers:… #> $ video             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL… #> $ vote_average      <dbl> 7.744, 8.200, 8.238, 7.271, 0.000, 0.000, 6.800, 4.3… #> $ vote_count        <int> 31725, 30490, 26301, 23406, 0, 0, 95, 724, 275, 126,…"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"get-movie-details","dir":"","previous_headings":"","what":"Get Movie Details","title":"Get Data from The Movie Database (TMDB) via the API","text":"","code":"avenger_movie_details <- movie_details(   movie_id = avenger_movies$id[1],   append_to_response = \"keywords\" )  avenger_movie_details %>% dplyr::glimpse() #> Rows: 1 #> Columns: 27 #> $ release_date          <chr> \"2012-04-25\" #> $ title                 <chr> \"The Avengers\" #> $ vote_average          <dbl> 7.744 #> $ vote_count            <int> 31724 #> $ popularity            <dbl> 36.0784 #> $ runtime               <int> 143 #> $ overview              <chr> \"When an unexpected enemy emerges and threatens … #> $ id                    <int> 24428 #> $ imdb_id               <chr> \"tt0848228\" #> $ adult                 <lgl> FALSE #> $ backdrop_path         <chr> \"/gHLs7Fy3DzLmLsD4lmfqL55KGcl.jpg\" #> $ belongs_to_collection <list> [86311, \"The Avengers Collection\", \"/yFSIUVTCvgY… #> $ budget                <int> 220000000 #> $ genres                <list> [[878, \"Science Fiction\"], [28, \"Action\"], [12, … #> $ homepage              <chr> \"https://www.marvel.com/movies/the-avengers\" #> $ origin_country        <list> [\"US\"] #> $ original_language     <chr> \"en\" #> $ original_title        <chr> \"The Avengers\" #> $ poster_path           <chr> \"/RYMX2wcKCBAr24UyPD7xwmjaTn.jpg\" #> $ production_companies  <list> [[420, \"/hUzeosd33nzE5MCNsZxCGEKTXaQ.png\", \"Marv… #> $ production_countries  <list> [[\"US\", \"United States of America\"]] #> $ revenue               <int> 1518815515 #> $ spoken_languages      <list> [[\"English\", \"en\", \"English\"], [\"Hindi\", \"hi\", \"… #> $ status                <chr> \"Released\" #> $ tagline               <chr> \"Some assembly required.\" #> $ video                 <lgl> FALSE #> $ keywords              <list> [[[242, \"new york city\"], [9715, \"superhero\"], […"},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":null,"dir":"Reference","previous_headings":"","what":"base_tmdb_request — base_tmdb_request","title":"base_tmdb_request — base_tmdb_request","text":"base_tmdb_request","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"base_tmdb_request — base_tmdb_request","text":"","code":"base_tmdb_request(auth_token = get_auth_token())"},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"base_tmdb_request — base_tmdb_request","text":"auth_token","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"base_tmdb_request — base_tmdb_request","text":"httr2 request object base URL, Authentication, Throttling parameters set","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/decrypt_auth_token.html","id":null,"dir":"Reference","previous_headings":"","what":"decrypt_auth_token — decrypt_auth_token","title":"decrypt_auth_token — decrypt_auth_token","text":"Token Obtained TMDB api Decript Authorization Token using httr2's secret encription","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/decrypt_auth_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"decrypt_auth_token — decrypt_auth_token","text":"","code":"decrypt_auth_token()"},{"path":"https://novakowd.github.io/tmdbdata/reference/decrypt_auth_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"decrypt_auth_token — decrypt_auth_token","text":"Character vector Authorization Token","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/discover_movies.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover_movies — discover_movies","title":"Discover_movies — discover_movies","text":"Discover TMDB movies number available optional parameters.","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/discover_movies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover_movies — discover_movies","text":"","code":"discover_movies(num_pages = 5, ...)"},{"path":"https://novakowd.github.io/tmdbdata/reference/discover_movies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover_movies — discover_movies","text":"num_pages Max. number pages request API server (default = 5 pages x 20 results/page) ... Search parameters seen documentation website","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":null,"dir":"Reference","previous_headings":"","what":"get_tmdb_response — get_tmdb_response","title":"get_tmdb_response — get_tmdb_response","text":"get_tmdb_response","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_tmdb_response — get_tmdb_response","text":"","code":"get_tmdb_response(path_args = NULL, auth_token = get_auth_token(), ...)"},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_tmdb_response — get_tmdb_response","text":"path_args List Character Vector - Additional arguments appended base API url ... arguments passed named query parameters","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_tmdb_response — get_tmdb_response","text":"response JSON format","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":null,"dir":"Reference","previous_headings":"","what":"movie_details — movie_details","title":"movie_details — movie_details","text":"Get TMDB movie details","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"movie_details — movie_details","text":"","code":"movie_details(movie_id, append_to_response = NULL)"},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"movie_details — movie_details","text":"movie_id Required search parameter, internal TMDB identifier movie append_to_response Optional, comma separated list endpoints within namespace, 20 items max (ex: \"videos,images\")","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"movie_details — movie_details","text":"1 row tibble containing JSON response details specified movie columns (25 columns default, plus append_to_response)","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"search_collection — search_collection","title":"search_collection — search_collection","text":"Search TMDB Collections database","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"search_collection — search_collection","text":"","code":"search_collection(query, ...)"},{"path":"https://novakowd.github.io/tmdbdata/reference/search_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"search_collection — search_collection","text":"query Required search parameter ... optional search parameters","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":null,"dir":"Reference","previous_headings":"","what":"search_movies — search_movies","title":"search_movies — search_movies","text":"search_movies() wrapper function, uses combine_page_results() : run search_movies_response(query) get response first page determine many total pages/results query returned takes $total_pages response, Compares optional argument num_pages pages desired, uses loop_through_pages() combine rows pages, returns one data.frame object search_movies_response() returns named list one page JSON response (default page = 1). response contains: $page - (integer value) $results - (data.frame object representing one page results, typically 20 entries per page) $total_pages - (integer value) $total_results - (integer value)","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"search_movies — search_movies","text":"","code":"search_movies(query, ...)  search_movies_response(query, ..., auth_token = get_auth_token())"},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"search_movies — search_movies","text":"query Required. character vector one element ... Optional Query Parameters passed search/movies/ resource. required parameter query","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"search_movies — search_movies","text":"Search TMDB movie database movies original, translated alternative titles.","code":""},{"path":[]}]
