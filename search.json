[{"path":"https://novakowd.github.io/tmdbdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 tmdbdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://novakowd.github.io/tmdbdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Novakowski. Author, maintainer.","code":""},{"path":"https://novakowd.github.io/tmdbdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Novakowski D (2025). tmdbdata: Get Data Movie Database (TMDB) via API. R package version 0.0.0.9000, https://novakowd.github.io/tmdbdata/.","code":"@Manual{,   title = {tmdbdata: Get Data from The Movie Database (TMDB) via the API},   author = {Dylan Novakowski},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://novakowd.github.io/tmdbdata/}, }"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"readme-for-tmdbdata-r-package","dir":"","previous_headings":"","what":"Get Data from The Movie Database (TMDB) via the API","title":"Get Data from The Movie Database (TMDB) via the API","text":"Authentication Examples Create Basic Request Append Request Details Response Structure Missing Data","code":""},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Get Data from The Movie Database (TMDB) via the API","text":"goal tmdbdata serve API wrapper access data Movie Database‚Äôs (TMDB) Application Programming Interface (API) can install development version tmdbdata GitHub :","code":"# install.packages(\"devtools\") # devtools::install_github(\"novakowd/tmdbdata\") # library(tmdbdata)  devtools::load_all() # Development version of library(tmdbdata) # Other packages used in this file library(tidyverse) library(httr2)"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"authentication","dir":"","previous_headings":"","what":"Authentication","title":"Get Data from The Movie Database (TMDB) via the API","text":"package must supplied API Read Access Token functions interact API. Otherwise API server throw error message: obtain Access Token, follow steps API‚Äôs documentation. YOUR_AUTH_TOKEN, store environment variable storing .Renviron file means variable available future R sessions set_auth_token() also set TMDB_AUTH_TOKEN environment variable, specific session ‚Äôre working ","code":"search_movies(query = \"Avengers\",               auth_token = invalid_auth_token) #> Error in `httr2::req_perform()`: #> ! HTTP 401 Unauthorized. #> ‚Ä¢ Invalid API key: You must be granted a valid key. usethis::edit_r_environ()  # type `TMDB_AUTH_TOKEN=YOUR_AUTH_TOKEN` in the `.Renviron` that opened, # then save the file"},{"path":[]},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"search-for-movies","dir":"","previous_headings":"","what":"Search For Movies","title":"Get Data from The Movie Database (TMDB) via the API","text":"","code":"avenger_movies <- search_movies(query = \"Avengers\",                                  num_pages = 1)   avenger_movies %>% glimpse() #> Rows: 20 #> Columns: 14 #> $ adult             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL‚Ä¶ #> $ backdrop_path     <chr> \"/mDfJG3LC3Dqb67AZ52x3Z0jU0uB.jpg\", \"/7RyHsO4yDXtBv1‚Ä¶ #> $ genre_ids         <list> <12, 28, 878>, <12, 878, 28>, <878, 28, 12>, <28, 1‚Ä¶ #> $ id                <int> 299536, 299534, 24428, 99861, 1003596, 1359227, 1003‚Ä¶ #> $ original_language <chr> \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\", \"en\"‚Ä¶ #> $ original_title    <chr> \"Avengers: Infinity War\", \"Avengers: Endgame\", \"The ‚Ä¶ #> $ overview          <chr> \"As the Avengers and their allies have continued to ‚Ä¶ #> $ popularity        <dbl> 87.9166, 47.7377, 38.6284, 23.2918, 14.2425, 8.4778,‚Ä¶ #> $ poster_path       <chr> \"/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\", \"/ulzhLuWrPK07P1‚Ä¶ #> $ release_date      <chr> \"2018-04-25\", \"2019-04-24\", \"2012-04-25\", \"2015-04-2‚Ä¶ #> $ title             <chr> \"Avengers: Infinity War\", \"Avengers: Endgame\", \"The ‚Ä¶ #> $ video             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL‚Ä¶ #> $ vote_average      <dbl> 8.235, 8.237, 7.740, 7.271, 0.000, 6.782, 0.000, 4.3‚Ä¶ #> $ vote_count        <int> 30437, 26251, 31629, 23372, 0, 94, 0, 724, 125, 274,‚Ä¶"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"get-movie-details","dir":"","previous_headings":"","what":"Get Movie Details","title":"Get Data from The Movie Database (TMDB) via the API","text":"","code":"avenger_movie_details <- movie_details(   movie_id = avenger_movies$id[1],   append_to_response = \"keywords\" )  avenger_movie_details$title #> [1] \"Avengers: Infinity War\" avenger_movie_details$runtime %>% paste(\"minutes\") #> [1] \"149 minutes\" avenger_movie_details$genres #>    id            name #> 1  12       Adventure #> 2  28          Action #> 3 878 Science Fiction avenger_movie_details$keywords$keywords #>        id                            name #> 1    2858                       sacrifice #> 2    2343                           magic #> 3    9715                       superhero #> 4    9717                  based on comic #> 5    9882                           space #> 6   10141                     battlefield #> 7   14900                        genocide #> 8   15252                  magical object #> 9   33637                     super power #> 10 155030                  superhero team #> 11 179430             aftercreditsstinger #> 12 180547 marvel cinematic universe (mcu) #> 13 231295                          cosmic"},{"path":[]},{"path":[]},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"tmdb-data-functions-with-httr2functions","dir":"","previous_headings":"","what":"TMDB data functions with httr2::functions()","title":"Get Data from The Movie Database (TMDB) via the API","text":"Package uses httr2 package functions generate perform requests extract results response body.","code":""},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"create-basic-request","dir":"","previous_headings":"","what":"Create Basic Request","title":"Get Data from The Movie Database (TMDB) via the API","text":"base_tmdb_request constructed looking settings found API documentation. example: req_headers() info Response Format Authentication Documentation. req_throttle() info Rate Limits Documentation üìù default auth_token = get_auth_token(), work option 1 2 (environment variable) mentioned Authorization header info also redacted following objects. Running base_tmdb_request() function generates basic <httr2_request> object: functions req_headers(), req_error(), req_user_agent(), req_throttle() change URL https://api.themoviedb.org/3/, add elements request Headers, Options, Policies.","code":"base_tmdb_request #> function(auth_token = get_auth_token()) { #>   httr2::request(\"https://api.themoviedb.org/3/\") %>% #>     httr2::req_headers( #>       accept = \"application/json\", #>       Authorization = paste( #>         \"Bearer\", #>         auth_token #>       ), #>       .redact = \"Authorization\" #>     ) %>% #>     httr2::req_error(body = tmdb_error_body) %>% #>     httr2::req_user_agent(\"tmdbdata (https://github.com/novakowd/tmdbdata)\") %>% #>     httr2::req_throttle(rate = 40, realm = \"https://api.themoviedb.org/3/\") #> } #> <environment: namespace:tmdbdata> #> <httr2_request> #> GET https://api.themoviedb.org/3/ #> Headers: #> ‚Ä¢ accept       : \"application/json\" #> ‚Ä¢ Authorization: <REDACTED> #> Body: empty #> Options: #> ‚Ä¢ useragent: \"tmdbdata (https://github.com/novakowd/tmdbdata)\" #> Policies: #> ‚Ä¢ error_body    : <function> #> ‚Ä¢ throttle_realm: \"https://api.themoviedb.org/3/\""},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"append-request-details","dir":"","previous_headings":"","what":"Append Request Details","title":"Get Data from The Movie Database (TMDB) via the API","text":"next step append path base URL add relevant arguments help request. Find appropriate arguments consulting API Documentation. example looks Search>Movie Documentation states: required parameter called query , optional parameters, default values. Let‚Äôs try putting together request search movies Avengers: functions req_url_path_append() req_url_query() modified url https://api.themoviedb.org/3/search/movie?query=Avengers","code":"base_tmdb_request() %>%    req_url_path_append(\"search\",\"movie\") %>%    req_url_query(query = \"Avengers\") #> <httr2_request> #> GET https://api.themoviedb.org/3/search/movie?query=Avengers #> Headers: #> ‚Ä¢ accept       : \"application/json\" #> ‚Ä¢ Authorization: <REDACTED> #> Body: empty #> Options: #> ‚Ä¢ useragent: \"tmdbdata (https://github.com/novakowd/tmdbdata)\" #> Policies: #> ‚Ä¢ error_body    : <function> #> ‚Ä¢ throttle_realm: \"https://api.themoviedb.org/3/\""},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"perform-request","dir":"","previous_headings":"","what":"Perform Request","title":"Get Data from The Movie Database (TMDB) via the API","text":"Now built request, req_perform() allows us get response. assigning variable stores response -memory, exceed API‚Äôs Rate Limits","code":"response <- base_tmdb_request() %>%    req_url_path_append(\"search\", \"movie\") %>%    req_url_query(query = \"Avengers\") %>%    req_perform()  response #> <httr2_response> #> GET https://api.themoviedb.org/3/search/movie?query=Avengers #> Status: 200 OK #> Content-Type: application/json #> Body: In memory (12038 bytes)"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"response-structure","dir":"","previous_headings":"Perform Request","what":"Response Structure","title":"Get Data from The Movie Database (TMDB) via the API","text":"Printing <httr2_response> object show much information, though information available inspecting closer: actual ‚ÄòData‚Äô ‚Äôre looking $body element, though usable format yet:","code":"class(response) #> [1] \"httr2_response\" data.frame(class = unlist(lapply(response,class)),            length = unlist(lapply(response,length))) #>                     class length #> method          character      1 #> url             character      1 #> status_code       integer      1 #> headers     httr2_headers     20 #> body                  raw  12038 #> request     httr2_request      8 #> cache         environment      0 names(response$headers) #>  [1] \"Content-Type\"      \"Transfer-Encoding\" \"Connection\"        #>  [4] \"Date\"              \"Server\"            \"Cache-Control\"     #>  [7] \"x-memc\"            \"x-memc-key\"        \"x-memc-age\"        #> [10] \"x-memc-expires\"    \"ETag\"              \"Content-Encoding\"  #> [13] \"Vary\"              \"X-Cache\"           \"Via\"               #> [16] \"X-Amz-Cf-Pop\"      \"Alt-Svc\"           \"X-Amz-Cf-Id\"       #> [19] \"Age\"               \"Vary\" response$body %>% glimpse() #>  raw [1:12038] 7b 22 70 61 ..."},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"response-body","dir":"","previous_headings":"","what":"Response Body","title":"Get Data from The Movie Database (TMDB) via the API","text":"httr2 provides many resp_body_*() functions extract body data, depending API response format(s). API Documentation states supported response format JSON, use resp_body_json() function use simplifyVector = T make resulting lists easier work . Inspecting body shows list 4 elements. $page, $total_pages, $total_results elements integer values: $results element data.frame","code":"body <- response %>%    resp_body_json(simplifyVector = T) lapply(body, class) #> $page #> [1] \"integer\" #>  #> $results #> [1] \"data.frame\" #>  #> $total_pages #> [1] \"integer\" #>  #> $total_results #> [1] \"integer\" body[c(\"page\", \"total_pages\", \"total_results\")] #> $page #> [1] 1 #>  #> $total_pages #> [1] 7 #>  #> $total_results #> [1] 126 body$results %>%    glimpse() #> Rows: 20 #> Columns: 14 #> $ adult             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL‚Ä¶ #> $ backdrop_path     <chr> \"/mDfJG3LC3Dqb67AZ52x3Z0jU0uB.jpg\", \"/Al127H6f1RXpES‚Ä¶ #> $ genre_ids         <list> <12, 28, 878>, <16, 35, 878>, <878, 28, 12>, <28, 1‚Ä¶ #> $ id                <int> 299536, 1359227, 24428, 40081, 257346, 1154598, 2995‚Ä¶ #> $ original_language <chr> \"en\", \"en\", \"en\", \"zh\", \"ja\", \"en\", \"en\", \"en\", \"en\"‚Ä¶ #> $ original_title    <chr> \"Avengers: Infinity War\", \"LEGO Marvel Avengers: Mis‚Ä¶ #> $ overview          <chr> \"As the Avengers and their allies have continued to ‚Ä¶ #> $ popularity        <dbl> 87.9166, 8.4778, 38.6284, 1.7733, 2.7585, 4.1031, 47‚Ä¶ #> $ poster_path       <chr> \"/7WsyChQLEftFiDOVTGkv3hFpyyt.jpg\", \"/4KfgyzCgJeG0XJ‚Ä¶ #> $ release_date      <chr> \"2018-04-25\", \"2024-10-17\", \"2012-04-25\", \"1978-12-2‚Ä¶ #> $ title             <chr> \"Avengers: Infinity War\", \"LEGO Marvel Avengers: Mis‚Ä¶ #> $ video             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL‚Ä¶ #> $ vote_average      <dbl> 8.235, 6.782, 7.740, 6.837, 6.400, 6.556, 8.237, 7.2‚Ä¶ #> $ vote_count        <int> 30437, 94, 31629, 98, 274, 125, 26251, 23372, 724, 3‚Ä¶"},{"path":"https://novakowd.github.io/tmdbdata/index.html","id":"missing-data","dir":"","previous_headings":"Response Body","what":"Missing Data","title":"Get Data from The Movie Database (TMDB) via the API","text":"body$total_results 126, yet body$results contain 20 rows. body$total_pages = 7 response returns one page. get pages, need specify additional argument page = n response, like : ‚Äòsecond page‚Äô table contains next 20 rows. get rows need repeat page = 7","code":"page2_response <- base_tmdb_request() %>%    req_url_path_append(\"search\", \"movie\") %>%    req_url_query(query = \"Avengers\",                 page = 2) %>%                ### NEW ARGUMENT   req_perform() %>%    resp_body_json(simplifyVector = T)   page2_response %>%    pluck('results') %>%    glimpse() #> Rows: 20 #> Columns: 14 #> $ adult             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL‚Ä¶ #> $ backdrop_path     <chr> \"/3aN6XMUfHmIsluhki7DRevM766D.jpg\", \"/eQiRPyEWhYnuqE‚Ä¶ #> $ genre_ids         <list> <28, 12>, <>, <35, 14, 28>, <35, 27>, <10751, 16, 2‚Ä¶ #> $ id                <int> 83876, 448368, 538153, 1353766, 940543, 385411, 4823‚Ä¶ #> $ original_language <chr> \"zh\", \"en\", \"en\", \"xx\", \"en\", \"el\", \"ja\", \"zh\", \"en\"‚Ä¶ #> $ original_title    <chr> \"ÂÜ∑Ë°ÄÂçÅ‰∏âÈ∑π\", \"The Avengers: A Visual Journey\", \"Avengers‚Ä¶ #> $ overview          <chr> \"Eagle Chief Yoh Xi-hung raises orphans to be his pe‚Ä¶ #> $ popularity        <dbl> 0.9892, 2.6584, 1.5184, 0.4081, 1.2433, 0.2987, 1.63‚Ä¶ #> $ poster_path       <chr> \"/tpOVfLNNmWQFNJrfrAnLmdsx8pT.jpg\", \"/2kBT7KONKQTIhk‚Ä¶ #> $ release_date      <chr> \"1978-09-13\", \"2012-09-25\", \"2018-07-20\", \"2024-09-2‚Ä¶ #> $ title             <chr> \"The Avenging Eagle\", \"The Avengers: A Visual Journe‚Ä¶ #> $ video             <lgl> FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALS‚Ä¶ #> $ vote_average      <dbl> 7.40, 7.90, 5.30, 7.80, 6.80, 8.40, 7.10, 6.80, 5.10‚Ä¶ #> $ vote_count        <int> 34, 27, 28, 2, 14, 9, 14, 23, 64, 25, 33, 24, 6, 148‚Ä¶"},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":null,"dir":"Reference","previous_headings":"","what":"base_tmdb_request ‚Äî base_tmdb_request","title":"base_tmdb_request ‚Äî base_tmdb_request","text":"base_tmdb_request","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"base_tmdb_request ‚Äî base_tmdb_request","text":"","code":"base_tmdb_request(auth_token = get_auth_token())"},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"base_tmdb_request ‚Äî base_tmdb_request","text":"auth_token","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/base_tmdb_request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"base_tmdb_request ‚Äî base_tmdb_request","text":"httr2 request object base URL, Authentication, Throttling parameters set","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/discover_movies.html","id":null,"dir":"Reference","previous_headings":"","what":"Discover_movies ‚Äî discover_movies","title":"Discover_movies ‚Äî discover_movies","text":"Discover TMDB movies number available optional parameters.","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/discover_movies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discover_movies ‚Äî discover_movies","text":"","code":"discover_movies(num_pages = 5, ...)"},{"path":"https://novakowd.github.io/tmdbdata/reference/discover_movies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discover_movies ‚Äî discover_movies","text":"num_pages Max. number pages request API server (default = 5 pages x 20 results/page) ... Search parameters seen documentation website","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":null,"dir":"Reference","previous_headings":"","what":"get_tmdb_response ‚Äî get_tmdb_response","title":"get_tmdb_response ‚Äî get_tmdb_response","text":"get_tmdb_response","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_tmdb_response ‚Äî get_tmdb_response","text":"","code":"get_tmdb_response(path_args = NULL, auth_token = get_auth_token(), ...)"},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_tmdb_response ‚Äî get_tmdb_response","text":"path_args List Character Vector - Additional arguments appended base API url ... arguments passed named query parameters","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/get_tmdb_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_tmdb_response ‚Äî get_tmdb_response","text":"response JSON format","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":null,"dir":"Reference","previous_headings":"","what":"movie_details ‚Äî movie_details","title":"movie_details ‚Äî movie_details","text":"Get TMDB movie details","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"movie_details ‚Äî movie_details","text":"","code":"movie_details(movie_id, append_to_response = NULL)"},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"movie_details ‚Äî movie_details","text":"movie_id Required search parameter, internal TMDB identifier movie append_to_response Optional, comma separated list endpoints within namespace, 20 items max (ex: \"videos,images\")","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/movie_details.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"movie_details ‚Äî movie_details","text":"JSON response movie details specified movie","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"search_collection ‚Äî search_collection","title":"search_collection ‚Äî search_collection","text":"Search TMDB Collections database","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"search_collection ‚Äî search_collection","text":"","code":"search_collection(query, ...)"},{"path":"https://novakowd.github.io/tmdbdata/reference/search_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"search_collection ‚Äî search_collection","text":"query Required search parameter ... optional search parameters","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":null,"dir":"Reference","previous_headings":"","what":"search_movies ‚Äî search_movies","title":"search_movies ‚Äî search_movies","text":"search_movies() wrapper function, uses combine_page_results() : run search_movies_response(query) get response first page determine many total pages/results query returned takes $total_pages response, Compares optional argument num_pages pages desired, uses loop_through_pages() combine rows pages, returns one data.frame object search_movies_response() returns named list one page JSON response (default page = 1). response contains: $page - (integer value) $results - (data.frame object representing one page results, typically 20 entries per page) $total_pages - (integer value) $total_results - (integer value)","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"search_movies ‚Äî search_movies","text":"","code":"search_movies(query, ...)  search_movies_response(query, ..., auth_token = get_auth_token())"},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"search_movies ‚Äî search_movies","text":"query Required. character vector one element ... Optional Query Parameters passed search/movies/ resource. required parameter query","code":""},{"path":"https://novakowd.github.io/tmdbdata/reference/search_movies.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"search_movies ‚Äî search_movies","text":"Search TMDB movie database movies original, translated alternative titles.","code":""},{"path":[]}]
